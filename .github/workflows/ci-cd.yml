name: CI/CD Pipeline

on:
  push:
    branches: [ CI-CD-Final-Deployment_1 ]
  pull_request:
    branches: [ CI-CD-Final-Deployment_1 ]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          echo "Waiting for PostgreSQL to start..."
          for i in {1..30}; do
            if nc -z postgres 5432; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Attempt $i/30: PostgreSQL not ready yet..."
            sleep 2
          done
          echo "PostgreSQL failed to start within 60 seconds"
          exit 1

      - name: Run all tests
        env:
          DB_NAME: test_db
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_HOST: postgres
          DB_PORT: 5432
          REDIS_HOST: redis
          REDIS_PORT: 6379
          SECRET_KEY: test_secret_key_123
          DEBUG: False
        run: |
          python manage.py test --noinput

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: success()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd /var/www/myapp
          git fetch --all
          git reset --hard origin/${{ github.ref_name }}
          source venv/bin/activate
          pip install -r requirements.txt
          python manage.py migrate
          python manage.py collectstatic --noinput
          sudo systemctl restart gunicorn
          sudo systemctl restart nginx