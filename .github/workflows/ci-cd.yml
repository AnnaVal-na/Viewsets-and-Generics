name: CI/CD Pipeline

on:
  push:
    branches: [ final_assignment_fixed, main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-django

      - name: Create static directory
        run: mkdir -p static

      - name: Run tests with coverage
        env:
          SECRET_KEY: test-secret-key-1234567890
          DEBUG: True
          DB_ENGINE: django.db.backends.sqlite3
          DB_NAME: ":memory:"
        run: |
          coverage run --source=. manage.py test --noinput --verbosity=2
          coverage report -m
          coverage html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yaml build

      - name: Test Docker containers
        run: |
          docker-compose -f docker-compose.yaml up -d db redis
          sleep 10
          docker-compose -f docker-compose.yaml ps
          docker-compose -f docker-compose.yaml down

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/final_assignment_fixed' || github.ref == 'refs/heads/main'

    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Устанавливаем Docker Compose если не установлен
            if ! command -v docker-compose &> /dev/null; then
              echo "Installing Docker Compose..."
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Переходим в директорию проекта
            cd /var/www/myapp
            
            # Останавливаем текущие контейнеры
            sudo docker-compose down
            
            # Получаем последние изменения
            git fetch --all
            git reset --hard origin/${{ github.ref_name }}
            
            # Даем права на папки
            sudo chown -R $USER:$USER /var/www/myapp
            chmod -R 755 /var/www/myapp
            
            # Запускаем контейнеры
            sudo docker-compose up -d --build
            
            # Ждем запуска сервисов
            sleep 30
            
            # Выполняем миграции и сбор статики
            sudo docker-compose exec -T web python manage.py migrate --noinput
            sudo docker-compose exec -T web python manage.py collectstatic --noinput
            sudo docker-compose exec -T web python manage.py create_admin_user || true
            
            # Проверяем статус контейнеров
            sudo docker-compose ps
            sudo docker-compose logs web --tail=50
            
            echo "✅ Deployment completed successfully!"