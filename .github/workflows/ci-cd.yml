name: CI/CD Pipeline

on:
  push:
    branches: [ feature/cicd-final, final_assignment_fixed, main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Check code formatting with black
        run: |
          black --check --diff .

  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-django

      - name: Create static directory
        run: mkdir -p static

      - name: Run tests with coverage
        env:
          SECRET_KEY: test-secret-key-1234567890
          DEBUG: "True"
          DB_NAME: test_db
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          coverage run --source=. manage.py test --noinput --verbosity=2
          coverage report -m

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker images
        run: |
          docker-compose -f docker-compose.yaml build

  deploy:
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.ref == 'refs/heads/feature/cicd-final' || github.ref == 'refs/heads/final_assignment_fixed'

    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Убедимся, что директория существует
            sudo mkdir -p /var/www/myapp
            sudo chown -R $USER:$USER /var/www/myapp
            cd /var/www/myapp

            # Создаём .env из секрета
            echo "${{ secrets.ENV_CONTENT }}" > .env

            # Получаем код
            git init
            git remote add origin https://github.com/AnnaVal-na/Viewsets-and-Generics.git
            git fetch --depth=1 origin ${{ github.ref_name }}
            git reset --hard FETCH_HEAD

            # Останавливаем старые контейнеры
            docker-compose down 2>/dev/null || true

            # Запускаем новые
            docker-compose up -d --build

            # Ждём запуска
            sleep 20

            # Выполняем миграции и сбор статики
            docker-compose exec -T web python manage.py migrate --noinput
            docker-compose exec -T web python manage.py collectstatic --noinput
            docker-compose exec -T web python manage.py create_admin_user || true

            # Проверка
            echo "✅ Deployment completed!"
            docker-compose ps